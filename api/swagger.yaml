openapi: 3.0.0
info:
  title: API de Cadastro de Usuários
  version: 1.0
  description: Documentação da API que gerencia serviços de festas
tags:
  - name: usuário
    description: Endpoints relacionados aos usuários
  - name: serviço
    description: Endpoints relacionados aos serviços de festas
paths:
  /user:
    get:
      tags:
        - usuário
      summary: Lista todos os usuários
      security:
        - JWTAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOfUser'
          
    post:
      tags:
        - usuário
      summary: Cria um novo usuário
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'

  /user/{id}:
    get:
      tags:
        - usuário
      summary: Obtém um usuário pelo ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário a ser obtido
          schema:
            type: string
      security:
        - JWTAuth: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'
    put:
      tags:
        - usuário
      summary: Atualiza um usuário pelo ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário a ser atualizado
          schema:
            type: string
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'
    delete:
      tags:
        - usuário
      summary: Exclui um usuário pelo ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID do usuário a ser excluído
          schema:
            type: string
      security:
        - JWTAuth: []
      responses:
        '204':
          description: No Content
        '404':
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'

  /api/services:
    post:
      tags:
        - serviço
      summary: Criar um novo serviço de festa
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Servico'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servico'
        '422':
          description: Unprocessable Entity
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'

  /api/services/{id}:
    get:
      tags:
        - serviço
      summary: Obter um serviço pelo ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID do serviço a ser obtido
          schema:
            type: string
      responses:
        '200':
          description: Serviço obtido com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Servico'
        '404':
          description: Serviço não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'
    delete:
      tags:
        - serviço
      summary: Excluir um serviço pelo ID
      parameters:
        - in: path
          name: id
          required: true
          description: ID do serviço a ser excluído
          schema:
            type: string
      responses:
        '200':
          description: Serviço excluído com sucesso
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'
        '404':
          description: Serviço não encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mensagem'

  /user/login:
    post:
      tags:
        - Autenticação
      summary: Faz login do usuário e retorna um token JWT
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Token gerado com sucesso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Credenciais inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  msg:
                    type: string

components:
  schemas:
    ArrayOfUser:
      type: array
      items:
        $ref: '#/components/schemas/User'
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
    Mensagem:
      type: object
      properties:
        msg:
          type: string
    Servico:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
  securitySchemes:
    JWTAuth:
      type: apiKey
      in: header
      name: Authorization
